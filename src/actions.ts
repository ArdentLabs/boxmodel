import { Action, AnyAction } from 'redux'
import { ActionTypes } from './types'
import { Query, Filters, Sorts, Pagination, Join } from './typings'

export interface Entities<Model> {
  [entityId: string]: Model
}

export interface ModelAction<Model> extends Action {
  payload:
    | {
        entity: Model
      } // create, one, update
    | {
        query: Query
        result: string[]
        entities: Entities<Model>
      } // all
    | {
        id: string
      } // archive
    | {
        entities: Entities<Model>
      } // merge
    | {
        message: string
      } // fail
    | {
        filter: Filters
      } // setFilter
    | {
        sort: Sorts
      } // setSort
    | {
        page: Pagination
      } // setPage
}

/** All the action creators that are generated by `generateActions` */
export interface ActionCreators<Model> {
  create: (
    values: Model
  ) => AnyAction & {
    payload: {
      values: Model
    }
  }
  one: (
    id: string,
    join: Join
  ) => AnyAction & {
    payload: {
      id: string
      join: Join
      force: boolean
    }
  }
  all: (
    join: Join
  ) => AnyAction & {
    payload: {
      join: Join
      force: boolean
    }
  }
  update: (
    id: string,
    values: Partial<Model>
  ) => AnyAction & {
    payload: {
      id: string
      values: Partial<Model>
    }
  }
  archive: (
    id: string
  ) => AnyAction & {
    payload: {
      id: string
    }
  }
  setFilter: (
    filter: Filters
  ) => AnyAction & {
    payload: {
      filter: Filters
    }
  }
  setSort: (
    sort: Sorts
  ) => AnyAction & {
    payload: {
      sort: Sorts
    }
  }
  setPage: (
    page: Pagination
  ) => AnyAction & {
    payload: {
      page: Pagination
    }
  }
}

export const generateActionCreators = <Model>(
  types: ActionTypes
): ActionCreators<Model> => {
  const create = (values: Model) => ({
    type: types.create.request,
    payload: { values },
  })

  const one = (id: string, join: Join, force: boolean = false) => ({
    type: types.one.request,
    payload: { id, join, force },
  })

  const all = (join: Join, force: boolean = false) => ({
    type: types.all.request,
    payload: { join, force },
  })

  const update = (id: string, values: Partial<Model>) => ({
    type: types.update.request,
    payload: { id, values },
  })

  const archive = (id: string) => ({
    type: types.archive.request,
    payload: { id },
  })

  const setFilter = (filter: Filters) => ({
    type: types.setFilter,
    payload: { filter },
  })

  const setSort = (sort: Sorts) => ({
    type: types.setSort,
    payload: { sort },
  })

  const setPage = (page: Pagination) => ({
    type: types.setPage,
    payload: { page },
  })

  /*
   * Among the actions, `create`, `update`, `archive`, `setFilter`, `setSort`, and `setPage` should be called externally, while `one` and `all` should be called only internally.
   */

  return {
    create,
    one,
    all,
    update,
    archive,
    setFilter,
    setSort,
    setPage,
  }
}
